# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import subprocess
from pathlib import Path
from tkinter import Tk, Canvas, Entry, Button, PhotoImage, filedialog, messagebox

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\krkr\Desktop\TERM4\cyper-security\EN_DE_criptionGui\Project Cyber\frame\frame0")

home = r"C:\Users\krkr\Desktop\TERM4\cyper-security\EN_DE_criptionGui\Project Cyber\HomePage\gui.py"  # change the path HomePage verryyyy importanttttt

def home1():
    window.destroy()
    subprocess.run(["python", home], check=True)

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

# Affine cipher functions
def egcd(a, b):
    x, y, u, v = 0, 1, 1, 0
    while a != 0:
        q, r = b // a, b % a
        m, n = x - u * q, y - v * q
        b, a, x, y, u, v = a, r, u, v, m, n
    return b, x, y

def modinv(a, m):
    gcd, x, y = egcd(a, m)
    if gcd != 1:
        return None  # modular inverse does not exist
    else:
        return x % m

def affine_encrypt(text, key):
    # Ensure text is uppercase and spaces are removed
    text = text.upper().replace(' ', '')
    return ''.join([chr(((key[0] * (ord(t) - ord('A')) + key[1]) % 26) + ord('A')) for t in text])

def affine_decrypt(cipher, key):
    cipher = cipher.upper().replace(' ', '')
    return ''.join([chr(((modinv(key[0], 26) * (ord(c) - ord('A') - key[1])) % 26) + ord('A')) for c in cipher])

def parse_keys(entry_value):
    try:
        key_a, key_b = map(int, entry_value.split(','))
        if(key_a>=26 or key_a<=0 or key_b>=26 or key_b<=0):
          messagebox.showerror("Erorr" , "Key must be between 1 and 25")
          return None
        return key_a, key_b
    except ValueError:
        messagebox.showerror("Error", "Invalid key format. Please enter two numbers separated by a comma.")
        return None

def save_to_file(text, default_name='output.txt'):
    file_path = filedialog.asksaveasfilename(defaultextension=".txt", initialfile=default_name)
    if file_path:
        with open(file_path, 'w') as file:
            file.write(text)
            messagebox.showinfo("Success", "File saved successfully!")

def update_entry_with_file(entry_widget):
    file_path = filedialog.askopenfilename()
    if file_path:
        with open(file_path, 'r') as file:
            entry_widget.delete(0, 'end')
            entry_widget.insert(0, file.read())

window = Tk()

window.geometry("1172x684")
window.configure(bg="#080017")

canvas = Canvas(
    window,
    bg="#080017",
    height=684,
    width=1172,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)

canvas.create_text(
    413.0,
    35.0,
    anchor="nw",
    text="Welcome to Affine Cipher",
    fill="#FFFFFF",
    font=("InknutAntiqua Regular", 26 * -1)
)

canvas.create_text(
    173.0,
    133.0,
    anchor="nw",
    text="Encryption",
    fill="#555BE8",
    font=("InknutAntiqua Regular", 26 * -1)
)

canvas.create_text(
    24.0,
    191.0,
    anchor="nw",
    text="Message",
    fill="#FFFFFF",
    font=("InknutAntiqua Regular", 26 * -1)
)

entry_bg_1 = canvas.create_image(
    192.5,
    276.5,
)
entry_1 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=27.0,
    y=251.0,
    width=331.0,
    height=49.0
)

button_1 = Button(
    text="Upload File",
    bg="#2a4e78",
    fg="#ffffff",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_1 clicked"),
    relief="flat",
    font=("Arial", 18)
)
button_1.place(
    x=391.0,
    y=252.0,
    width=151.0,
    height=50.0
)

canvas.create_text(
    24.0,
    333.0,
    anchor="nw",
    text="Key",
    fill="#FFFFFF",
    font=("InknutAntiqua Regular", 23 * -1)
)

entry_bg_2 = canvas.create_image(
    195.5,
    404.5,
)
entry_2 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_2.place(
    x=30.0,
    y=379.0,
    width=331.0,
    height=49.0
)

canvas.create_text(
    18.0,
    458.0,
    anchor="nw",
    text="Cipher Text",
    fill="#FFFFFF",
    font=("InknutAntiqua Regular", 23 * -1)
)

entry_bg_3 = canvas.create_image(
    191.5,
    536.5,
)
entry_3 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_3.place(
    x=27.0,
    y=511.0,
    width=329.0,
    height=49.0
)

button_2 = Button(
    text="Save File",
    bg="#2a4e78",
    fg="#ffffff",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_2 clicked"),
    relief="flat",
    font=("Arial", 18)
)
button_2.place(
    x=391.0,
    y=513.0,
    width=151.0,
    height=50.0
)

canvas.create_text(
    805.0,
    133.0,
    anchor="nw",
    text="Decryption",
    fill="#1F45CC",
    font=("InknutAntiqua Regular", 23 * -1)
)

canvas.create_text(
    608.0,
    191.0,
    anchor="nw",
    text="Cipher Text",
    fill="#FFFFFF",
    font=("InknutAntiqua Regular", 23 * -1)
)

entry_bg_4 = canvas.create_image(
    785.5,
    277.5,
)
entry_4 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_4.place(
    x=620.0,
    y=252.0,
    width=331.0,
    height=49.0
)

button_3 = Button(
    text="Upload File",
    bg="#2a4e78",
    fg="#ffffff",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_3 clicked"),
    relief="flat",
    font=("Arial", 18)
)
button_3.place(
    x=999.0,
    y=256.0,
    width=151.0,
    height=50.0
)

canvas.create_text(
    608.0,
    331.0,
    anchor="nw",
    text="Key",
    fill="#FFFFFF",
    font=("InknutAntiqua Regular", 24 * -1)
)

entry_bg_5 = canvas.create_image(
    785.5,
    406.5,
)
entry_5 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_5.place(
    x=620.0,
    y=381.0,
    width=331.0,
    height=49.0
)

canvas.create_text(
    608.0,
    450.0,
    anchor="nw",
    text="Message",
    fill="#FFFFFF",
    font=("InknutAntiqua Regular", 26 * -1)
)

entry_bg_6 = canvas.create_image(
    785.5,
    537.5,
)
entry_6 = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
entry_6.place(
    x=620.0,
    y=512.0,
    width=331.0,
    height=49.0
)

button_4 = Button(
    text="Save File",
    bg="#2a4e78",
    fg="#ffffff",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_4 clicked"),
    relief="flat",
    font=("Arial", 18)
)
button_4.place(
    x=993.0,
    y=518.0,
    width=157.0,
    height=51.0
)

button_5 = Button(
    text="Go to Home",
    bg="#2a4e78",
    fg="#ffffff",
    borderwidth=0,
    highlightthickness=0,
    command=home1,
    relief="flat",
    font=("Arial", 18)
)
button_5.place(
    x=124.0,
    y=602.0,
    width=267.0,
    height=59.0
)

button_6 = Button(
    text="Exit",
    bg="#2a4e78",
    fg="#ffffff",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: window.destroy(),
    relief="flat",
    font=("Arial", 18)
)
button_6.place(
    x=726.0,
    y=596.0,
    width=267.0,
    height=65.0
)

button_7 = Button(
    text="Encrypt",
    bg="#2a4e78",
    fg="#ffffff",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: encrypt_message(entry_1, entry_2, entry_3),
    relief="flat",
    font=("Arial", 18)
)
button_7.place(
    x=392.0,
    y=378.0,
    width=151.0,
    height=52.0
)

button_8 = Button(
    text="Decrypt",
    bg="#2a4e78",
    fg="#ffffff",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: decrypt_message(entry_4, entry_5, entry_6),
    relief="flat",
    font=("Arial", 18)
)
button_8.place(
    x=999.0,
    y=378.0,
    width=151.0,
    height=52.0
)

def checkText(text):
    text = text.replace(' ', '')
    if text == "":
        messagebox.showerror("Error", "Please enter a message.")
        return False
    elif not text.isalpha():
        messagebox.showerror("Error", "Message must be alphabetic.")
        return False
    return True

def encrypt_message(entry_message, entry_key, entry_output):
    message = entry_message.get().replace(' ','')
    key = parse_keys(entry_key.get())
    if(key == None) : return
    if checkText(message) and key:
        entry_output.delete(0, 'end')
        entry_output.insert(0, affine_encrypt(message, key))

def decrypt_message(entry_cipher, entry_key, entry_output):
    cipher = entry_cipher.get().replace('',' ')
    key = parse_keys(entry_key.get())
    if(key == None) : return
    if checkText(cipher) and key:
        entry_output.delete(0, 'end')
        entry_output.insert(0, affine_decrypt(cipher, key))

button_1.configure(command=lambda: update_entry_with_file(entry_1))
button_2.configure(command=lambda: save_to_file(entry_3.get(), 'encrypted_message.txt'))
button_3.configure(command=lambda: update_entry_with_file(entry_4))
button_4.configure(command=lambda: save_to_file(entry_6.get(), 'decrypted_message.txt'))

window.resizable(False, False)
window.mainloop()
